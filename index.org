#+title: Calendar Stock Option Spreads
#+author: Matt Brigida, Ph.D.
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+HTML_HEAD: <style>pre.src{background:#343131;color:white;} </style>

#+begin_comment
Pull data from IB because we need bid/ask and not last trade.
#+end_comment

* Sell Short-Dated and Buy Long

In this type of spread we initiate positions in options which expire on
different dates.  For example, say we sell a 50 call expiring in a month, and
buy a 50 call expiring in 2 months.  We know this will be a debit
spread---net we will have to pay because the longer-dated call will have a
higher price.

Let's assume:

|             | Strike | Premium | Expiration |
|-------------+--------+---------+------------|
| Call Sold   |     50 | $1.27   | 1 month    |
| Call Bought |     50 | $1.98   | 2 months   |
|-------------+--------+---------+------------|

The premia were determined using the Black-Scholes model with a constant volatility of 30%, a 1% risk free rate, and a $49 stock price.  Implementing the spread gives us a cash flow of $1.27 - $1.98 = -$0.71 today.

Let's calculate the profit on the spread when the shorter-dated option expires (1 month), assuming we sell the longer-dated option on that date.  Also assume volatility stays constant.  We assume we sell the longer-dated call at the Black-Scholes value of the call.

To do this let's load a function that will calculate the Black-Scholes call option value into a Python session.

Load required libraries:

#+begin_src python :session *calendar_spreads*
import numpy as np
from scipy.stats import norm
#+end_src

#+RESULTS:

#+begin_src python :session *calendar_spreads*
def black_scholes_call(stock, strike, risk_free, vol, time):
    d1 = (np.log(stock / strike) + (risk_free + vol * vol / 2) * time) / (vol * np.sqrt(time))
    d2 = d1 - vol * np.sqrt(time)
    call = stock * norm.cdf(d1) - strike * np.exp(-risk_free * time) * norm.cdf(d2)
    return(round(call, 2))
#+end_src

#+RESULTS:

We can now create a function to value our calendar spread, and apply it to various underlying stock prices using a list comprehension:

#+begin_src python :session *calendar_spreads*
def calendar_spread_1(stock, vol):
    profit_call_bought = black_scholes_call(stock, 50, .01, vol, 1/12) - 1.98
    profit_call_sold = 1.27 - max(stock - 50, 0)
    total_profit = profit_call_bought + profit_call_sold
    return(round(total_profit, 2))
#+end_src

#+RESULTS:

#+begin_src python :session *calendar_spreads*
profit_1_same_vol = [calendar_spread_1(x, 0.3) for x in range(30, 70)]
#+end_src

#+RESULTS:

Plot the spread profit:

#+begin_src python :session *calendar_spreads*
import plotly.express as px

fig = px.line(x = range(30, 70), y = profit_1_same_vol, template='plotly_dark', title="Profit on Calendar Spread (Constant Volatility)").update_layout(
    xaxis_title="Stock Price", yaxis_title="Spread Profit"
)

fig.add_hline(y=0)

fig.write_html("./figs/profit_same_vol.html")
#+end_src

#+RESULTS:
: None

#+begin_export html
<iframe src="./figs/profit_same_vol.html" width="100%" height="400" style="border:none;">
</iframe>
#+end_export

Note this resembles the profit on a butterfly, except the transition to the max loss has curvature.

This is how the calendar spread is defined in textbooks, however it is not particularly realistic.  Stock volatility is not constant, and will likely change.  In the next few plots we'll look at the spread profit when volatility increases and decreases.  Last, we'll look at the most realistic scenario: volatility decreases of the stock price increases, and volatility increases if the stock price decreases (known as the leverage effect).

** What if volatility increases?

Buying the longer-dated call => long volatility.

#+begin_src python :session *calendar_spreads*
profit_1_increase_vol = [calendar_spread_1(x, 0.5) for x in range(30, 70)]

fig2 = px.line(x = range(30, 70), y = profit_1_increase_vol, template='plotly_dark', title="Profit on Calendar Spread (Increases Volatility)").update_layout(
    xaxis_title="Stock Price", yaxis_title="Spread Profit"
)

fig2.add_hline(y=0)

fig2.write_html("./figs/profit_vol_increase.html")
#+end_src

#+RESULTS:
: None

#+begin_export html
<iframe src="./figs/profit_vol_increase.html" width="100%" height="400" style="border:none;">
</iframe>
#+end_export


** What if volatility decreases?

#+begin_src python :session *calendar_spreads*
profit_1_decrease_vol = [calendar_spread_1(x, 0.1) for x in range(30, 70)]

fig3 = px.line(x = range(30, 70), y = profit_1_decrease_vol, template='plotly_dark', title="Profit on Calendar Spread (Decreases Volatility)").update_layout(
    xaxis_title="Stock Price", yaxis_title="Spread Profit"
)

fig3.add_hline(y=0)

fig3.write_html("./figs/profit_vol_decrease.html")
#+end_src

#+RESULTS:
: None

#+begin_export html
<iframe src="./figs/profit_vol_decrease.html" width="100%" height="400" style="border:none;">
</iframe>
#+end_export


** Most Realistic: Taking into Account the Leverage Effect

#+begin_src python :session *calendar_spreads*
import numpy

stock_prices = range(30, 70)
volatilities = numpy.linspace(.5, .1, num=40)

profit_1_leverage_vol = [calendar_spread_1(x, y) for x, y in zip(stock_prices, volatilities)]

fig4 = px.line(x = range(30, 70), y = profit_1_leverage_vol, template='plotly_dark', title="Profit on Calendar Spread (Leverage Effect)").update_layout(
    xaxis_title="Stock Price", yaxis_title="Spread Profit"
)

fig4.add_hline(y=0)

fig4.write_html("./figs/profit_vol_leverage.html")
#+end_src

#+RESULTS:
: None

#+begin_export html
<iframe src="./figs/profit_vol_leverage.html" width="100%" height="400" style="border:none;">
</iframe>
#+end_export


** Leverage Effect: Larger Volatility Range

Let's increase the volatility range to 90% if the stock is 30, and 10% if the stock is 70.  This will make the shape of the spread more apparent, though the ranges are not particularly realistic (though still possible).

#+begin_src python :session *calendar_spreads*
stock_prices = range(30, 70)
volatilities = numpy.linspace(.9, .1, num=40)

profit_1_leverage2_vol = [calendar_spread_1(x, y) for x, y in zip(stock_prices, volatilities)]

fig5 = px.line(x = range(30, 70), y = profit_1_leverage2_vol, template='plotly_dark', title="Profit on Calendar Spread (Larger Leverage Effect)").update_layout(
    xaxis_title="Stock Price", yaxis_title="Spread Profit"
)

fig5.add_hline(y=0)

fig5.write_html("./figs/profit_vol_leverage2.html")
#+end_src

#+RESULTS:
: None

#+begin_export html
<iframe src="./figs/profit_vol_leverage2.html" width="100%" height="400" style="border:none;">
</iframe>
#+end_export

* Buy Short-Dated and Sell Long

Flip the charts about the x axis.  
